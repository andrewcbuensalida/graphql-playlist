{"version":3,"sources":["components/SelectedBookContext.js","queries/queries.js","components/BookDetails.js","components/BookList.js","components/AddBook.js","App.js","index.js"],"names":["SelectedBookContext","createContext","SelectedBookContextProvider","children","useState","selectedBookID","setSelectedBookID","Provider","value","GET_AUTHORS_QUERY","gql","GET_BOOKS_QUERY","ADD_BOOK_MUTATION","GET_BOOK_QUERY","DELETE_BOOK_MUTATION","BookDetails","useQuery","variables","id","getBookQueryData","data","loading","error","book","console","log","author","books","name","genre","className","map","item","displayBookDetails","BookList","useContext","useMutation","deleteBookMutation","getBooksQueryData","getBooksQueryLoading","e","bookId","a","stopPropagation","refetchQueries","query","deleteBook","onClick","handleDelete","AddBook","setName","setGenre","authorId","setAuthorId","isFormIncomplete","setIsFormIncomplete","getAuthorsQueryData","getAuthorsQueryLoading","addBookMutation","onSubmit","preventDefault","submitForm","type","onChange","target","disabled","authors","App","cache","InMemoryCache","client","ApolloClient","uri","ApolloProvider","render","document","getElementById"],"mappings":"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","file":"static/js/main.133a5c79.chunk.js","sourcesContent":["import { createContext, useState } from \"react\";\r\nimport React from \"react\";\r\n\r\nexport const SelectedBookContext = createContext();\r\n\r\nexport function SelectedBookContextProvider({ children }) {\r\n\tconst [selectedBookID, setSelectedBookID] = useState(null);\r\n\r\n\treturn (\r\n\t\t<SelectedBookContext.Provider\r\n\t\t\tvalue={{ selectedBookID, setSelectedBookID }}\r\n\t\t>\r\n\t\t\t{children}\r\n\t\t</SelectedBookContext.Provider>\r\n\t);\r\n}\r\n","import { gql } from \"@apollo/client\";\r\n\r\nconst GET_AUTHORS_QUERY = gql`\r\n\t{\r\n\t\tauthors {\r\n\t\t\tname\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst GET_BOOKS_QUERY = gql`\r\n\t{\r\n\t\tbooks {\r\n\t\t\tname\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n// $ is query variable, ! requires that it is that type and not null\r\n//AddBook is just for naming and is optional. the name id under the addBook is the returned\r\n// promise result in data\r\nconst ADD_BOOK_MUTATION = gql`\r\n\tmutation AddBook($name: String!, $genre: String!, $authorId: ID!) {\r\n\t\taddBook(name: $name, genre: $genre, authorId: $authorId) {\r\n\t\t\tname\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst GET_BOOK_QUERY = gql`\r\n\tquery GetBook($id: ID) {\r\n\t\tbook(id: $id) {\r\n\t\t\tid\r\n\t\t\tname\r\n\t\t\tgenre\r\n\t\t\tauthor {\r\n\t\t\t\tid\r\n\t\t\t\tname\r\n\t\t\t\tage\r\n\t\t\t\tbooks {\r\n\t\t\t\t\tname\r\n\t\t\t\t\tid\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst DELETE_BOOK_MUTATION = gql`\r\n\tmutation DeleteBook($id: ID!) {\r\n\t\tdeleteBook(id: $id) {\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\nexport {\r\n\tGET_AUTHORS_QUERY,\r\n\tGET_BOOKS_QUERY,\r\n\tADD_BOOK_MUTATION,\r\n\tGET_BOOK_QUERY,\r\n\tDELETE_BOOK_MUTATION,\r\n};\r\n","import React from \"react\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { GET_BOOK_QUERY } from \"../queries/queries\";\r\n\r\nexport default function BookDetails({ selectedBookID }) {\r\n\tconst {\r\n\t\tdata: getBookQueryData,\r\n\t\tloading: getBookQueryLoading,\r\n\t\terror: getBookQueryError,\r\n\t} = useQuery(GET_BOOK_QUERY, {\r\n\t\tvariables: {\r\n\t\t\tid: selectedBookID,\r\n\t\t},\r\n\t\t// fetchPolicy: \"no-cache\",\r\n\t});\r\n\r\n\tfunction displayBookDetails() {\r\n\t\tif (getBookQueryData && getBookQueryData.book) {\r\n\t\t\tlet { book } = getBookQueryData;\r\n\t\t\tconsole.log(`This is book.author.books`);\r\n\t\t\tconsole.log(book.author.books);\r\n\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2>{book.name}</h2>\r\n\t\t\t\t\t<p>Genre: {book.genre}</p>\r\n\t\t\t\t\t<p>Author: {book.author.name}</p>\r\n\t\t\t\t\t<p>All books by this author:</p>\r\n\t\t\t\t\t<ul className=\"other-books\">\r\n\t\t\t\t\t\t{book.author.books.map((item) => {\r\n\t\t\t\t\t\t\treturn <li key={item.id}>{item.name}</li>;\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\treturn <div>No book selected...</div>;\r\n\t\t}\r\n\t}\r\n\r\n\treturn <div id=\"book-details\">{displayBookDetails()}</div>;\r\n}\r\n\r\n//whenever prop updates, variable resets for query. props comes from BookList passing the bookId. then sends a query to\r\n//the server, then returns props used in BookDetails. HOC.\r\n// export default graphql(getBookQuery, {\r\n// \toptions: (props) => {\r\n// \t\treturn {\r\n// \t\t\tvariables: {\r\n// \t\t\t\tid: props.bookId,\r\n// \t\t\t},\r\n// \t\t};\r\n// \t},\r\n// \t// fetchPolicy: \"no-cache\",\r\n// })(BookDetails);\r\n","import React, { useContext } from \"react\";\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport {\r\n\tGET_BOOKS_QUERY,\r\n\tDELETE_BOOK_MUTATION,\r\n\tGET_BOOK_QUERY,\r\n} from \"../queries/queries\";\r\n\r\nimport BookDetails from \"./BookDetails\";\r\nimport { SelectedBookContext } from \"./SelectedBookContext\";\r\n\r\nexport default function BookList() {\r\n\tconst { selectedBookID, setSelectedBookID } =\r\n\t\tuseContext(SelectedBookContext);\r\n\tconst [deleteBookMutation, { data, loading, error }] =\r\n\t\tuseMutation(DELETE_BOOK_MUTATION);\r\n\tconst {\r\n\t\tdata: getBooksQueryData,\r\n\t\tloading: getBooksQueryLoading,\r\n\t\terror: getBooksQueryError,\r\n\t} = useQuery(GET_BOOKS_QUERY);\r\n\r\n\tasync function handleDelete(e, bookId) {\r\n\t\te.stopPropagation();\r\n\r\n\t\tlet {\r\n\t\t\tdata: {\r\n\t\t\t\tdeleteBook: { id: deletedBookID },\r\n\t\t\t},\r\n\t\t} = await deleteBookMutation({\r\n\t\t\tvariables: {\r\n\t\t\t\tid: bookId,\r\n\t\t\t},\r\n\t\t\trefetchQueries: [\r\n\t\t\t\t{ query: GET_BOOKS_QUERY },\r\n\t\t\t\t{\r\n\t\t\t\t\tquery: GET_BOOK_QUERY,\r\n\t\t\t\t\tvariables: {\r\n\t\t\t\t\t\tid: selectedBookID,\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t\t// fetchPolicy: \"no-cache\",\r\n\t\t});\r\n\t\tif (deletedBookID == selectedBookID) setSelectedBookID(null);\r\n\t}\r\n\r\n\tfunction displayBooks() {\r\n\t\tif (getBooksQueryLoading) {\r\n\t\t\treturn <div>Loading books...</div>;\r\n\t\t} else {\r\n\t\t\treturn getBooksQueryData.books.map((book) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<li\r\n\t\t\t\t\t\tkey={book.id}\r\n\t\t\t\t\t\tonClick={(e) => setSelectedBookID(book.id)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{book.name}\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tonClick={(e) => {\r\n\t\t\t\t\t\t\t\thandleDelete(e, book.id);\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tx\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<ul id=\"book-list\">{displayBooks()}</ul>\r\n\t\t\t<BookDetails selectedBookID={selectedBookID} />\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React, { useState, useContext } from \"react\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\n\r\nimport {\r\n\tGET_AUTHORS_QUERY,\r\n\tADD_BOOK_MUTATION,\r\n\tGET_BOOKS_QUERY,\r\n\tGET_BOOK_QUERY,\r\n} from \"../queries/queries\";\r\n\r\nimport { SelectedBookContext } from \"./SelectedBookContext\";\r\n\r\nexport default function AddBook() {\r\n\tconst [name, setName] = useState(\"\");\r\n\tconst [genre, setGenre] = useState(\"\");\r\n\tconst [authorId, setAuthorId] = useState(\"\");\r\n\tconst [isFormIncomplete, setIsFormIncomplete] = useState(false);\r\n\r\n\tconst { selectedBookID } = useContext(SelectedBookContext);\r\n\r\n\tconst {\r\n\t\tdata: getAuthorsQueryData,\r\n\t\tloading: getAuthorsQueryLoading,\r\n\t\terror: getAuthorsQueryError,\r\n\t} = useQuery(GET_AUTHORS_QUERY);\r\n\tconst [\r\n\t\taddBookMutation,\r\n\t\t{\r\n\t\t\tdata: addBookMutationData,\r\n\t\t\tloading: addBookMutationLoading,\r\n\t\t\terror: addBookMutationError,\r\n\t\t},\r\n\t] = useMutation(ADD_BOOK_MUTATION);\r\n\r\n\tfunction displayAuthors() {\r\n\t\tif (getAuthorsQueryLoading) {\r\n\t\t\treturn <option disabled>Loading authors</option>;\r\n\t\t} else {\r\n\t\t\treturn getAuthorsQueryData.authors.map((author) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<option key={author.id} value={author.id}>\r\n\t\t\t\t\t\t{author.name}\r\n\t\t\t\t\t</option>\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\tfunction submitForm(e) {\r\n\t\te.preventDefault();\r\n\t\tif (name == \"\" || genre == \"\" || authorId == \"\") {\r\n\t\t\tsetIsFormIncomplete(true);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsetIsFormIncomplete(false);\r\n\t\t// use the addBookMutation. has addBookMutation name because in the name in the compose down below\r\n\t\t// variables name genre authorId go to the queries AddBook\r\n\t\taddBookMutation({\r\n\t\t\tvariables: {\r\n\t\t\t\tname: name,\r\n\t\t\t\tgenre: genre,\r\n\t\t\t\tauthorId: authorId,\r\n\t\t\t},\r\n\t\t\trefetchQueries: [\r\n\t\t\t\t{ query: GET_BOOKS_QUERY },\r\n\t\t\t\t{\r\n\t\t\t\t\tquery: GET_BOOK_QUERY,\r\n\t\t\t\t\tvariables: {\r\n\t\t\t\t\t\tid: selectedBookID,\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t});\r\n\t\tsetName(\"\");\r\n\t\tsetGenre(\"\");\r\n\t\tsetAuthorId(\"\");\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form\r\n\t\t\tid=\"add-book\"\r\n\t\t\tonSubmit={(e) => {\r\n\t\t\t\tsubmitForm(e);\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{isFormIncomplete && <div id=\"incomplete\">Form is incomplete</div>}\r\n\t\t\t<div className=\"field\">\r\n\t\t\t\t<label>Book name:</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\tvalue={name}\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tonChange={(e) => setName(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"field\">\r\n\t\t\t\t<label>Genre:</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\tvalue={genre}\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tonChange={(e) => setGenre(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"field\">\r\n\t\t\t\t<label>Author:</label>\r\n\t\t\t\t<select\r\n\t\t\t\t\tvalue={authorId}\r\n\t\t\t\t\tonChange={(e) => setAuthorId(e.target.value)}\r\n\t\t\t\t>\r\n\t\t\t\t\t<option key=\"\" value=\"\">\r\n\t\t\t\t\t\tSelect author\r\n\t\t\t\t\t</option>\r\n\t\t\t\t\t{displayAuthors()}\r\n\t\t\t\t</select>\r\n\t\t\t</div>\r\n\t\t\t<button>+</button>\r\n\t\t</form>\r\n\t);\r\n}\r\n\r\n//when you have more than one mutation or query, use compose, which sends data to this.props.getAuthors or BookMutation\r\n// export default compose(\r\n// \tgraphql(getAuthorsQuery, { name: \"getAuthorsQuery\" }),\r\n// \tgraphql(addBookMutation, { name: \"addBookMutation\" })\r\n// )(AddBook);\r\n","import React from \"react\";\r\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\r\nimport { SelectedBookContextProvider } from \"./components/SelectedBookContext\";\r\n// components\r\nimport BookList from \"./components/BookList\";\r\nimport AddBook from \"./components/AddBook\";\r\n\r\nfunction App() {\r\n\tconst uri =\r\n\t\tprocess.env.NODE_ENV === \"production\"\r\n\t\t\t? \"/graphql\"\r\n\t\t\t: \"http://localhost:4000/graphql\";\r\n\t// apollo client setup\r\n\tconst cache = new InMemoryCache();\r\n\tconst client = new ApolloClient({\r\n\t\tcache,\r\n\t\turi,\r\n\t});\r\n\treturn (\r\n\t\t<ApolloProvider client={client}>\r\n\t\t\t<SelectedBookContextProvider>\r\n\t\t\t\t<div id=\"main\">\r\n\t\t\t\t\t<h1>Love's Book List</h1>\r\n\t\t\t\t\t<BookList />\r\n\t\t\t\t\t<AddBook />\r\n\t\t\t\t</div>\r\n\t\t\t</SelectedBookContextProvider>\r\n\t\t</ApolloProvider>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nrender(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}